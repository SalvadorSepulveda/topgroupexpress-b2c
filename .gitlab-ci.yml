cache:
  paths:
    - .output/public/

stages:
  - build
  - deploy

.default-setup: &default-setup
  image: oven/bun:latest
  tags:
    - docker # Use the "docker" executor
  rules:
    - if: '$CI_COMMIT_BRANCH == "staging"'
      variables:
        CI_ENVIRONMENT_NAME: "staging"
        CI_ENVIRONMENT_URL: "$CI_ENVIRONMENT_URL"
        BACKEND_URL: "$BACKEND_URL"
        NUXT_PUBLIC_SITE_URL: "$CI_ENVIRONMENT_URL" # for Nuxt SEO

    - if: '$CI_COMMIT_BRANCH == "main"'
      variables:
        CI_ENVIRONMENT_NAME: "production"
        CI_ENVIRONMENT_URL: "$CI_ENVIRONMENT_URL"
        NUXT_PUBLIC_SITE_URL: "$CI_ENVIRONMENT_URL" # for Nuxt SEO
        BACKEND_URL: "$BACKEND_URL"
  before_script:
    - echo "BACKEND_URL=$BACKEND_URL" > .env
    - echo "CI_ENVIRONMENT_URL=$CI_ENVIRONMENT_URL" >> .env
    - echo "NUXT_PUBLIC_SITE_URL=$CI_ENVIRONMENT_URL" >> .env # for Nuxt SEO
    - cat .env
    - bun install

nuxt-build:
  extends:
    - .default-setup
  stage: build
  tags:
    - docker
  script:
    - echo "CI_ENVIRONMENT_URL=$CI_ENVIRONMENT_URL"
    - echo "NUXT_PUBLIC_SITE_URL=$NUXT_PUBLIC_SITE_URL"
    - cat .env
    - bun run generate
  artifacts:
    paths:
      - .output/public

.deployment-setup: &deployment-setup
  stage: deploy
  image: node:latest
  tags:
    - docker # Use the "docker" executor
  needs:
    - nuxt-build
  before_script:
    - echo "CLOUDFLARE_ACCOUNT_ID=$CLOUDFLARE_ACCOUNT_ID"
    - echo "CLOUDFLARE_API_TOKEN=$CLOUDFLARE_API_TOKEN"
    - npm install -g wrangler
  artifacts:
    paths:
      - .output/public

deploy-staging:
  extends:
    - .deployment-setup
  environment: staging
  script:
    - wrangler pages deploy .output/public --project-name=website-staging --branch=main
  rules:
    - if: '$CI_COMMIT_BRANCH == "staging"'

deploy-production:
  extends:
    - .deployment-setup
  environment: production
  script:
    - wrangler pages deploy .output/public --project-name=website --branch=${CI_COMMIT_BRANCH}
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
